const { exec } = require("child_process");
const fs = require("fs");
const path = require("path");

async function runMythrilAudit() {
  console.log("üîç D√©marrage de l'audit de s√©curit√© avec Mythril...");

  const contractsDir = "./contracts";
  const auditDir = "./audit-reports";

  // Cr√©er le dossier d'audit s'il n'existe pas
  if (!fs.existsSync(auditDir)) {
    fs.mkdirSync(auditDir);
  }

  const contracts = [
    "JeuneDiplomeToken.sol",
    "DiplomaNFT.sol",
    "DiplomaRegistry.sol",
  ];

  for (const contract of contracts) {
    const contractPath = path.join(contractsDir, contract);
    const reportPath = path.join(
      auditDir,
      `${contract.replace(".sol", "")}-audit.json`
    );

    console.log(`\nüîç Audit de ${contract}...`);

    const command = `myth analyze ${contractPath} --execution-timeout 300 -o json`;

    exec(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`‚ùå Erreur lors de l'audit de ${contract}:`, error);
        return;
      }

      if (stderr) {
        console.warn(`‚ö†Ô∏è Avertissements pour ${contract}:`, stderr);
      }

      // Sauvegarder le rapport
      fs.writeFileSync(reportPath, stdout);
      console.log(`‚úÖ Rapport d'audit sauvegard√©: ${reportPath}`);

      // Analyser et afficher les r√©sultats
      try {
        const report = JSON.parse(stdout);
        analyzeReport(contract, report);
      } catch (e) {
        console.log(`üìÑ Rapport brut pour ${contract}:\n${stdout}`);
      }
    });
  }
}

function analyzeReport(contractName, report) {
  console.log(`\nüìä Analyse du rapport pour ${contractName}:`);

  if (report.issues && report.issues.length > 0) {
    console.log(`‚ö†Ô∏è ${report.issues.length} probl√®me(s) d√©tect√©(s):`);

    report.issues.forEach((issue, index) => {
      console.log(`\n${index + 1}. ${issue.title}`);
      console.log(`   S√©v√©rit√©: ${issue.severity}`);
      console.log(`   Type: ${issue.swc_id}`);
      console.log(`   Description: ${issue.description.head}`);
      console.log(`   Ligne: ${issue.lineno}`);
    });
  } else {
    console.log("‚úÖ Aucun probl√®me de s√©curit√© d√©tect√©!");
  }
}

// G√©n√©rer un rapport de recommandations
function generateSecurityRecommendations() {
  const recommendations = `
# üõ°Ô∏è Recommandations de S√©curit√©

## Mesures Impl√©ment√©es

### 1. Protection contre la Reentrancy
- ‚úÖ Utilisation de ReentrancyGuard d'OpenZeppelin
- ‚úÖ Modificateur nonReentrant sur les fonctions sensibles
- ‚úÖ Checks-Effects-Interactions pattern

### 2. Contr√¥le d'Acc√®s
- ‚úÖ Utilisation d'Ownable d'OpenZeppelin
- ‚úÖ Modificateurs personnalis√©s pour les r√¥les
- ‚úÖ V√©rification des permissions avant actions critiques

### 3. Gestion des Entiers
- ‚úÖ Solidity 0.8+ (protection int√©gr√©e contre overflow/underflow)
- ‚úÖ Utilisation d'OpenZeppelin SafeMath si n√©cessaire

### 4. Validation des Entr√©es
- ‚úÖ Require statements pour valider les param√®tres
- ‚úÖ V√©rification des adresses non nulles
- ‚úÖ Validation des montants et plages

### 5. Pause d'Urgence
- ‚úÖ Utilisation du contrat Pausable d'OpenZeppelin
- ‚úÖ Fonctions pause/unpause pour le owner

## Mesures Suppl√©mentaires Recommand√©es

### 1. Oracle de Prix
- ‚ö†Ô∏è Consid√©rer un oracle pour le prix ETH/Token plus robuste

### 2. Limite de Gaz
- ‚ö†Ô∏è Ajouter des limites sur les boucles pour √©viter les attaques DoS

### 3. Event Logging
- ‚úÖ Events appropri√©s pour toutes les actions importantes

### 4. Upgrade Pattern
- üí° Consid√©rer un proxy upgradeable pour les futures am√©liorations

### 5. Multi-Signature
- üí° Utiliser un multi-sig wallet pour le owner en production

## Tests de S√©curit√© Additionnels

1. **Test de Front-Running**: V√©rifier les fonctions sensibles aux attaques MEV
2. **Test de DoS**: V√©rifier la r√©sistance aux attaques de d√©ni de service
3. **Test d'Oracle**: Tester la manipulation des prix si oracle externe
4. **Test de Gouvernance**: V√©rifier les m√©canismes de vote si applicable

## D√©ploiement S√©curis√©

1. **Testnet First**: Toujours tester sur testnet avant mainnet
2. **Verify Contracts**: V√©rifier les contrats sur Etherscan
3. **Gradual Rollout**: Commencer avec des limites basses
4. **Monitor**: Surveiller les transactions suspectes
5. **Bug Bounty**: Consid√©rer un programme de bug bounty
`;

  fs.writeFileSync(
    "./audit-reports/security-recommendations.md",
    recommendations
  );
  console.log(
    "üìã Recommandations de s√©curit√© g√©n√©r√©es: ./audit-reports/security-recommendations.md"
  );
}

if (require.main === module) {
  runMythrilAudit();
  generateSecurityRecommendations();
}

module.exports = { runMythrilAudit, generateSecurityRecommendations };