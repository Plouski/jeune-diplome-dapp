const hre = require("hardhat");

async function main() {
    console.log("üöÄ D√©ploiement de la DApp Jeune Dipl√¥m√©...");
    
    // R√©cup√©rer les comptes
    const [deployer] = await hre.ethers.getSigners();
    console.log("D√©ploiement avec le compte:", deployer.address);
    
    try {
        const balance = await hre.ethers.provider.getBalance(deployer.address);
        console.log("Balance du compte:", hre.ethers.formatEther(balance), "ETH");
    } catch (error) {
        console.log("Erreur balance:", error.message);
    }
    
    // 1. D√©ployer le token ERC20
    console.log("\nüìÑ D√©ploiement du JeuneDiplomeToken...");
    const JeuneDiplomeToken = await hre.ethers.getContractFactory("JeuneDiplomeToken");
    const token = await JeuneDiplomeToken.deploy();
    await token.waitForDeployment();
    const tokenAddress = await token.getAddress();
    console.log("‚úÖ JeuneDiplomeToken d√©ploy√© √†:", tokenAddress);
    
    // 2. D√©ployer le NFT
    console.log("\nüé® D√©ploiement du DiplomaNFT...");
    const DiplomaNFT = await hre.ethers.getContractFactory("DiplomaNFT");
    const nft = await DiplomaNFT.deploy();
    await nft.waitForDeployment();
    const nftAddress = await nft.getAddress();
    console.log("‚úÖ DiplomaNFT d√©ploy√© √†:", nftAddress);
    
    // 3. D√©ployer le registre principal
    console.log("\nüìã D√©ploiement du DiplomaRegistry...");
    const DiplomaRegistry = await hre.ethers.getContractFactory("DiplomaRegistry");
    const registry = await DiplomaRegistry.deploy(tokenAddress, nftAddress);
    await registry.waitForDeployment();
    const registryAddress = await registry.getAddress();
    console.log("‚úÖ DiplomaRegistry d√©ploy√© √†:", registryAddress);
    
    // 4. Configuration des autorisations
    console.log("\n‚öôÔ∏è Configuration des autorisations...");
    
    await token.setDiplomaRegistry(registryAddress);
    console.log("‚úÖ Token configur√© avec le registry");
    
    await nft.setDiplomaRegistry(registryAddress);
    console.log("‚úÖ NFT configur√© avec le registry");
    
    const currentNFTOwner = await nft.owner();
    console.log("‚úÖ Owner du NFT:", currentNFTOwner);
    
    console.log("\nüéâ D√©ploiement termin√© avec succ√®s!");
    console.log("\nüìä R√©sum√© des adresses:");
    console.log("- JeuneDiplomeToken:", tokenAddress);
    console.log("- DiplomaNFT:", nftAddress);
    console.log("- DiplomaRegistry:", registryAddress);
    
    // Sauvegarder les adresses
    const fs = require('fs');
    const addresses = {
        JeuneDiplomeToken: tokenAddress,
        DiplomaNFT: nftAddress,
        DiplomaRegistry: registryAddress,
        deployer: deployer.address,
        network: hre.network.name,
        deployedAt: new Date().toISOString()
    };
    
    fs.writeFileSync('deployed-addresses.json', JSON.stringify(addresses, null, 2));
    console.log("\nüíæ Adresses sauvegard√©es dans deployed-addresses.json");
    
    console.log("\nüìù Prochaines √©tapes:");
    console.log("1. Configurer le frontend");
    console.log("2. Lancer: cd frontend && npm start");
    console.log("3. Tester l'application");
}

main()
    .then(() => {
        console.log("\n‚úÖ Script termin√© avec succ√®s!");
        process.exit(0);
    })
    .catch((error) => {
        console.error("\n‚ùå Erreur lors du d√©ploiement:", error);
        process.exit(1);
    });